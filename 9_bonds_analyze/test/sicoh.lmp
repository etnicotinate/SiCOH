# Initialization
units           real
dimension       3
boundary        p p p
atom_style      full
timestep        0.5   # fs

# Define MD parameters
variable nevery equal 1000                  # sampling interval
variable nrepeat equal 1                 # number of samples
variable nfreq equal ${nevery}*${nrepeat} # length of one average
variable nthermo equal ${nfreq}/10           # interval for thermo output
# 1 ps : 1e3 fs / 0.5 fs = 2e3 steps
variable nequil equal 5*${nthermo}       # steps of equilibration run 100
# variable nrun equal 20*${nthermo}          # stpes of equilibrated run 50
variable temp equal 300.0                # temperature of initial sample
variable tdamp equal 50.0                 # time constant for thermostat
variable seed equal 123456                # seed for thermostat
variable ufac equal 1.01325e-4         # pressure unit conversion, from atm to Gpa
variable up equal 1.0                  # the deformation magnitude 0.01 
variable FF string "SiOCHN_2018.ff C H O Si"          # force field args for pair_coeff
# pair_coeff * * CHONSSi.ff C H O Si
# pair_coeff * * CHOSiNa.ff C H O Si
# pair_coeff * * SiOCHN_2018.ff C H O Si
# pair_coeff * * PDMSDecomp.ff C H O Si
# pair_coeff * * CHONSi.ff C H O Si
# pair_coeff * * CHOFe.ff O Si

# Read the initial sctructure
# box tilt large
variable structure string ../../0_eq/0.lmpdata/333U-50C-5

read_data       ${structure}.data

# # Energy minimization
# print "*****Minimization starts.*****"
# dump dump_opt all custom 1 dump_opt.lammpstrj id type q x y z

# Assign the force field 
pair_style reaxff NULL safezone 3.0 mincap 150
pair_coeff * * ${FF}
# charge method for reaxff
fix myqeq all qeq/reaxff 1 0.0 10.0 1.0e-6 reaxff maxiter 400
fix bondinfo all reaxff/bonds ${nthermo} bonds.reaxff

# minimize 1.0e-6 1.0e-6 100 1000
# min_style cg
# # Save the optimized structure
# write_data ${structure}_opt.data

# undump dump_opt
velocity        all create ${temp} ${seed} dist gaussian

# Equilibration
include ff.mod.lmp
if "$(is_defined(fix,avgp))" then "unfix avgp"
if "$(is_defined(fix,avgl))" then "unfix avgl"
thermo_style custom step temp pe press density vol
# dump dump_eq all custom ${nthermo} dump/dump_eq.lammpstrj id type q x y z

# compute MSD and RDF
compute msd1 all msd
fix myMSD all ave/time ${nevery} ${nrepeat} ${nfreq} c_msd1[1] c_msd1[2] c_msd1[3] c_msd1[4] c_thermo_temp &
    file msd.out &
    title2 "# TimeStep MSD_X MSD_Y MSD_Z MSD_Total Temperture"
# C-C C-Si Si-O C-H Si-Si
# compute rdf1 all rdf 80 1 1 1 4 3 4 1 2 4 4 cutoff 5.0
# compute rdf1 all rdf 150 * * 1 1  1 4  4 3  3 4 cutoff 5.0
compute rdf1 all rdf 100 * *  4 3  3 4 cutoff 10.0

fix myRDF all ave/time ${nevery} ${nrepeat} ${nfreq} c_rdf1[*] &
    file rdf.out mode vector &
    title3 "# Row r g1(r) coor1(r) ..."

run ${nequil}
# # Save the equilibrated structure
# write_data ${structure}_eq.data
# undump dump_eq

# # use tmp to save initial length and tilt
# variable tmp equal lx
# variable lx0 equal ${tmp}
# variable tmp equal ly
# variable ly0 equal ${tmp}
# variable tmp equal lz
# variable lz0 equal ${tmp}

# variable tmp equal yz
# variable yz0 equal ${tmp}
# variable tmp equal xz
# variable xz0 equal ${tmp}
# variable tmp equal xy
# variable xy0 equal ${tmp}

# # Write restart
# write_restart equil.res

# # dir: direction
# # uxx Perturbation
# variable dir equal 1
# include displace.mod.lmp
# # uyy Perturbation
# variable dir equal 2
# include displace.mod.lmp
# # uzz Perturbation
# variable dir equal 3
# include displace.mod.lmp
# # uyz Perturbation
# variable dir equal 4
# include displace.mod.lmp
# # uxz Perturbation
# variable dir equal 5
# include displace.mod.lmp
# # uxy Perturbation
# variable dir equal 6
# include displace.mod.lmp

# # Calc and output
# # include calc.mod.lmp

